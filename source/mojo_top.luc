module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input cclk,             // configuration clock, AVR ready when high
    output spi_miso,        // AVR SPI MISO
    input spi_ss,           // AVR SPI Slave Select
    input spi_mosi,         // AVR SPI MOSI
    input spi_sck,          // AVR SPI Clock
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    input avr_tx,           // AVR TX (FPGA RX)
    output avr_rx,          // AVR RX (FPGA TX)
    input avr_rx_busy,       // AVR RX buffer full
    input io_dip [3][8],
    output io_led[3][8],
    input io_button[5]
    
  ) {
  
  sig rst;                  // reset signal
  sig button;
  
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    reset_conditioner resetter;
    reset_conditioner re;
    edge_detector butt(#RISE(1), #FALL(0));
    edge_detector but(#RISE(1), #FALL(0));
    .rst(rst){
      fsm automatic(#INIT(ADD))={IDLE, ADD, SUB, MUL, DIV, MOD, AVG, NZEROS, NONES, CMPEQ, CMPLT, CMPLE, SHL, SHR, SRA, BINZ, BINONE, AND, OR, XOR, A, B, XNOR, NAND, NOR, AEQB, NA, NB, MANUAL, ERROR};
      dff getA[16];
      dff getB[16];
      dff opcode[6];
      dff delayer[28]; // DELAY LIGHT UP
      dff modeSelector[1]; // TO STORE CURRENT MODE
      
      sixteenbitregister reg;
    }
  }

  alu alu;
  
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    resetter.in = ~io_button[0]; // input raw inverted reset signal CENTER
    butt.in = resetter.out;   // conditioned reset
    re.in = ~io_button[1]; // input raw signal UP
    but.in = re.out;  // conditioned reset (register)
    button = but.out; // assigned to signal (variable) button
    
    reg.en = button; // register
    reg.in[15:8] = io_dip[1]; // link middle dip buttons to register
    reg.in[7:0] = io_dip[0];  // link first set of dip buttons to register  
    
    led = 8h00;             // turn LEDs off
    spi_miso = bz;          // not using SPI
    spi_channel = bzzzz;    // not using flags
    avr_rx = bz;            // not using serial port
    io_led[0] = 8h0;
    io_led[1] = 8h0;
    io_led[2] = 8h0;
    modeSelector.d = 0;
    
    alu.a = getA.q; // setting up input A for alu
    alu.b = getB.q; // setting up input B for alu
    alu.alufn = opcode.q; // setting up opcode for alu
    
    if (butt.out){
      modeSelector.d = modeSelector.q + 1;} // pressing button will switch MODES: between MANUAL/AUTO
    else{
      modeSelector.d = modeSelector.q ; // else button not pressed, keep MODE unchanged
      }
      
    
    
    if(modeSelector.q == 1){ // IF AUTO
      alu.a = 16h4; // SET INPUT A
      alu.b = 16h2; // SET INPUT B

      case(automatic.q){
        // STOP CASE
        automatic.IDLE: 
          alu.alufn = 6h0;
          io_led = 3 x{{8h0}};          
        // TEST ADDER
        automatic.ADD:
          alu.alufn = 6b000000; // OPCODE -- ADD
          io_led[0] = alu.alu[7:0]; // LINK SHIELD LED 1ST SET
          io_led[1] = alu.alu[15:8]; // LINK SHIELD LED TO 2ND SET
          io_led[2] = 6b000000; // LINK SHIELD LED TO OPCODE
          delayer.d = delayer.q + 1; // TO DELAY LIGHTING THE LED UP
          if(delayer.q[27] == 1){ // AFTER 2^27 ~~ 4SECS
            delayer.d[27] = delayer.q[27] + 1; // DROP MSB
            automatic.d = automatic.SUB;  // NEXT STATE
            io_led = 3x{{8h0}};  // FORCE LED OFF
          }
        // TEST SUBTRACTOR  
        automatic.SUB:
          alu.alufn = 6b000001; //OPCODE -- SUB
          io_led[0] = alu.alu[7:0];// LINK SHIELD LED 1ST SET
          io_led[1] = alu.alu[15:8];// LINK SHIELD LED TO 2ND SET
          io_led[2] = 6b000001; // LINK SHIELD LED TO OPCODE
          delayer.d = delayer.q + 1; // TO DELAY LIGHTING THE LED UP
          if(delayer.q[27] == 1){ // AFTER 2^27 ~~ 4SECS
            delayer.d[27] = delayer.q[27] + 1; // DROP MSB
            automatic.d = automatic.MUL; // NEXT STATE
            io_led = 3x{{8h0}};  // FORCE LED OFF  
          }
        // TEST MULTIPLIER
        automatic.MUL:
          alu.alufn = 6b000010;
          io_led[0] = alu.alu[7:0];
          io_led[1] = alu.alu[15:8];
          io_led[2] = 6b000010;
          delayer.d = delayer.q + 1;
          if(delayer.q[27] == 1){
            delayer.d[27] = delayer.q[27] + 1;
            automatic.d = automatic.DIV;
            io_led = 3x{{8h0}};  
          }
        // TEST DIVISOR
        automatic.DIV:
          alu.alufn = 6b000011;
          io_led[0] = alu.alu[7:0];
          io_led[1] = alu.alu[15:8];
          io_led[2] = 6b000011;
          delayer.d = delayer.q + 1;
          if(delayer.q[27] == 1){
            delayer.d[27] = delayer.q[27] + 1;
            automatic.d = automatic.MOD;
            io_led = 3x{{8h0}};  
          }
        // TEST MODULO 
        automatic.MOD:
          alu.alufn = 6b000100;
          io_led[0] = alu.alu[7:0];
          io_led[1] = alu.alu[15:8];
          io_led[2] = 6b000100;
          delayer.d = delayer.q + 1;
          if(delayer.q[27] == 1){
            delayer.d[27] = delayer.q[27] + 1;
            automatic.d = automatic.AVG;
            io_led = 3x{{8h0}};  
          }
        // TEST AVERAGE  
        automatic.AVG:
          alu.alufn = 6b000101;
          io_led[0] = alu.alu[7:0];
          io_led[1] = alu.alu[15:8];
          io_led[2] = 6b000101;
          delayer.d = delayer.q + 1;
          if(delayer.q[27] == 1){
            delayer.d[27] = delayer.q[27] + 1;
            automatic.d = automatic.NZEROS;
            io_led = 3x{{8h0}};  
          }
        // TEST NUMBER OF ZEROS  
        automatic.NZEROS:
          alu.alufn = 6b000110;
          io_led[0] = alu.alu[7:0];
          io_led[1] = alu.alu[15:8];
          io_led[2] = 6b000110;
          delayer.d = delayer.q + 1;
          if(delayer.q[27] == 1){
            delayer.d[27] = delayer.q[27] + 1;
            automatic.d = automatic.NONES;
            io_led = 3x{{8h0}};  
          }
        // TEST NUMBER OF ONES  
        automatic.NONES:
          alu.alufn = 6b000111;
          io_led[0] = alu.alu[7:0];
          io_led[1] = alu.alu[15:8];
          io_led[2] = 6b000111;
          delayer.d = delayer.q + 1;
          if(delayer.q[27] == 1){
            delayer.d[27] = delayer.q[27] + 1;
            automatic.d = automatic.CMPEQ;
            io_led = 3x{{8h0}};  
          }
        // TEST COMPARE-EQUAL-TO      
        automatic.CMPEQ:
          alu.alufn = 6b000010;
          io_led[0] = alu.alu[7:0];
          io_led[1] = alu.alu[15:8];
          io_led[2] = 6b000010;
             
          delayer.d = delayer.q + 1;
          if(delayer.q[27] == 1){
            delayer.d[27] = delayer.q[27] + 1;
            automatic.d = automatic.CMPLT;
            io_led = 3x{{8h0}};  
          }
        // TEST COMPARE-LESS-THAN  
        automatic.CMPLT:
          alu.alufn = 6b000100;
          io_led[0] = alu.alu[7:0];
          io_led[1] = alu.alu[15:8];
          io_led[2] = 6b000100;

          delayer.d = delayer.q + 1;
          if(delayer.q[27] == 1){
            delayer.d[27] = delayer.q[27] + 1;
            automatic.d = automatic.CMPLE;
            io_led = 3x{{8h0}};  
          }
        // TEST COMPARE-LESS-THAN-OR-EQUAL-TO  
        automatic.CMPLE:
          alu.alufn = 6b000110;
          io_led[0] = alu.alu[7:0];
          io_led[1] = alu.alu[15:8];
          io_led[2] = 6b000110;

          delayer.d = delayer.q + 1;
          if(delayer.q[27] == 1){
            delayer.d[27] = delayer.q[27] + 1;
            automatic.d = automatic.SHL;
            io_led = 3x{{8h0}};  
          }
        // TEST SHIFT LEFT  
        automatic.SHL:
          alu.alufn = 6b100000;
          io_led[0] = alu.alu[7:0];
          io_led[1] = alu.alu[15:8];
          io_led[2] = 6b100000;

          delayer.d = delayer.q + 1;
          if(delayer.q[27] == 1){
            delayer.d[27] = delayer.q[27] + 1;
            automatic.d = automatic.SHR;
            io_led = 3x{{8h0}};  
          }
        // TEST SHIFT RIGHT  
        automatic.SHR:
          alu.alufn = 6b100001;
          io_led[0] = alu.alu[7:0];
          io_led[1] = alu.alu[15:8];
          io_led[2] = 6b100001;

          delayer.d = delayer.q + 1;
          if(delayer.q[27] == 1){
            delayer.d[27] = delayer.q[27] + 1;
            automatic.d = automatic.SRA;
            io_led = 3x{{8h0}};  
          }    
        // TEST SHIFT RIGHT (WITH ARITHMETIC)        
        automatic.SRA:
          alu.alufn = 6b100011;
          io_led[0] = alu.alu[7:0];
          io_led[1] = alu.alu[15:8];
          io_led[2] = 6b100011;

          delayer.d = delayer.q + 1;
          if(delayer.q[27] == 1){
            delayer.d[27] = delayer.q[27] + 1;
            automatic.d = automatic.BINZ;
            io_led = 3x{{8h0}};  
          }
        // TEST ALL-ZEROES
        automatic.BINZ:
          alu.alufn = 6b010000;
          io_led[0] = alu.alu[7:0];
          io_led[1] = alu.alu[15:8];
          io_led[2] = 6b010000;

          delayer.d = delayer.q + 1;
          if(delayer.q[27] == 1){
            delayer.d[27] = delayer.q[27] + 1;
            automatic.d = automatic.BINONE;
            io_led = 3x{{8h0}};  
          }
        // TEST ALL-ONES
        automatic.BINONE:
          alu.alufn = 6b010010;
          io_led[0] = alu.alu[7:0];
          io_led[1] = alu.alu[15:8];
                    io_led[2] = 6b010010;

          delayer.d = delayer.q + 1;
          if(delayer.q[27] == 1){
            delayer.d[27] = delayer.q[27] + 1;
            automatic.d = automatic.AND;
            io_led = 3x{{8h0}};  
          }                 
        // TEST BOOLEAN-AND  
        automatic.AND:
          alu.alufn = 6b011000;
          io_led[0] = alu.alu[7:0];
          io_led[1] = alu.alu[15:8];
          io_led[2] = 6b011000;

          delayer.d = delayer.q + 1;
          if(delayer.q[27] == 1){
            delayer.d[27] = delayer.q[27] + 1;
            automatic.d = automatic.OR;
            io_led = 3x{{8h0}};  
          }          
        // TEST BOOLEAN-OR  
        automatic.OR:
          alu.alufn = 6b011110;
          io_led[0] = alu.alu[7:0];
          io_led[1] = alu.alu[15:8];
          io_led[2] = 6b011110;

          delayer.d = delayer.q + 1;
          if(delayer.q[27] == 1){
            delayer.d[27] = delayer.q[27] + 1;
            automatic.d = automatic.XOR;
            io_led = 3x{{8h0}};  
          }          
        // TEST BOOLEAN-XOR  
        automatic.XOR:
          alu.alufn = 6b010110;
          io_led[0] = alu.alu[7:0];
          io_led[1] = alu.alu[15:8];
          io_led[2] = 6b010110;

          delayer.d = delayer.q + 1;
          if(delayer.q[27] == 1){
            delayer.d[27] = delayer.q[27] + 1;
            automatic.d = automatic.A;
            io_led = 3x{{8h0}};  
          }          
        // TEST SELECT A
        automatic.A:
          alu.alufn = 6b011010;
          io_led[0] = alu.alu[7:0];
          io_led[1] = alu.alu[15:8];
          io_led[2] = 6b011010;

          delayer.d = delayer.q + 1;
          if(delayer.q[27] == 1){
            delayer.d[27] = delayer.q[27] + 1;
            automatic.d = automatic.B;
            io_led = 3x{{8h0}};  
          }          
        // TEST SELECT B  
        automatic.B:
          alu.alufn = 6b011100;
          io_led[0] = alu.alu[7:0];
          io_led[1] = alu.alu[15:8];
          io_led[2] = 6b011100;

          delayer.d = delayer.q + 1;
          if(delayer.q[27] == 1){
            delayer.d[27] = delayer.q[27] + 1;
            automatic.d = automatic.XNOR;
            io_led = 3x{{8h0}};  
          }          
        // TEST BOOLEAN-XNOR  
        automatic.XNOR:
          alu.alufn = 6b011001;
          io_led[0] = alu.alu[7:0];
          io_led[1] = alu.alu[15:8];
          io_led[2] = 6b011001;

          delayer.d = delayer.q + 1;
          if(delayer.q[27] == 1){
            delayer.d[27] = delayer.q[27] + 1;
            automatic.d = automatic.NAND;
            io_led = 3x{{8h0}};  
          }          
        // TEST BOOLEAN-NAND  
        automatic.NAND:
          alu.alufn = 6b011101;
          io_led[0] = alu.alu[7:0];
          io_led[1] = alu.alu[15:8];
          io_led[2] = 6b011101;

          delayer.d = delayer.q + 1;
          if(delayer.q[27] == 1){
            delayer.d[27] = delayer.q[27] + 1;
            automatic.d = automatic.NOR;
            io_led = 3x{{8h0}};  
          }
        // TEST BOOLEAN-NOR            
        automatic.NOR:
          alu.alufn = 6b011111;
          io_led[0] = alu.alu[7:0];
          io_led[1] = alu.alu[15:8];
          io_led[2] = 6b011111;

          delayer.d = delayer.q + 1;
          if(delayer.q[27] == 1){
            delayer.d[27] = delayer.q[27] + 1;
            automatic.d = automatic.AEQB;
            io_led = 3x{{8h0}};  
          }          
        // TEST BOOLEAN-A-EQUAL-TO-B  
        automatic.AEQB:
          alu.alufn = 6b010011;
          io_led[0] = alu.alu[7:0];
          io_led[1] = alu.alu[15:8];
          io_led[2] = 6b010011;

          delayer.d = delayer.q + 1;
          if(delayer.q[27] == 1){
            delayer.d[27] = delayer.q[27] + 1;
            automatic.d = automatic.NA;
            io_led = 3x{{8h0}};  
          }          
        // TEST BOOLEAN-NOT-A            
        automatic.NA:
          alu.alufn = 6b010001;
          io_led[0] = alu.alu[7:0];
          io_led[1] = alu.alu[15:8];
          io_led[2] = 6b010001;

          delayer.d = delayer.q + 1;
          if(delayer.q[27] == 1){
            delayer.d[27] = delayer.q[27] + 1;
            automatic.d = automatic.NB;
            io_led = 3x{{8h0}};  
          }          
        // TEST BOOLEAN-NOT-B  
        automatic.NB:
          alu.alufn = 6b010101;
          io_led[0] = alu.alu[7:0];
          io_led[1] = alu.alu[15:8];
          io_led[2] = 6b010101;

          delayer.d = delayer.q + 1;
          if(delayer.q[27] == 1){
            delayer.d[27] = delayer.q[27] + 1;
            automatic.d = automatic.MANUAL;
            io_led = 3x{{8h0}};  
          }          
        // SHIFT TO MANUAL MODE
        automatic.MANUAL:
          io_led[2] = 8x{hF};
          delayer.d[27] = delayer.q[27] + 1;
          automatic.d = automatic.IDLE; // STATE CHANGE TO IDLE TO STOP
                                               
      }
       
      
    } 
        else{
        alu.alufn = io_dip[2][5:0]; // LEFT-MOST DIP SWITCHES CONNECT TO ALUFN
        led = 8h00;
        alu.a[7:0]= reg.out[7:0]; // 8LSB REGISTER OUTPUTS CONNECTED TO INPUT A
        alu.a[15:8] = reg.out[15:8]; // 8MSB RESITER OUTPUTS CONNECTED TO INPUT A
        alu.b[7:0]= io_dip[0]; // 8LSB DIP SWITCH INPUTS CONNECTED TO INPUT B
        alu.b[15:8] = io_dip[1]; // 8MSB DIP SWITCH INPUTS CONNECTED TO INPUT B

        io_led[2]=0;
        io_led[0]=alu.alu[7:0]; // DISPLAY 8LSB OF OUTPUT
        io_led[1]=alu.alu[15:8]; // DISPLAY 8MSB OF OUTPUT

        led=alu.error;  // ILLEGAL ALUFN WILL TRIGGER BASE LED TO LIGHT UP      
        }
    
  }
 
  
}
